Hbase数据模型
    Rowkey
        -决定一行数据
        -按照字典顺序排序的   ！！！！字典有序
        -RowKey只能存储64k的字节数据

    Column Family列族 & qualifier列
        -HBase表中的每个列都归属于某个列族，列族必须作为表模式(schema)定义的一部分预先给出。如 create ‘test’, ‘course’；
        -列名以列族作为前缀，每个“列族”都可以有多个列成员(column)；如course:math, course:english, 新的列族成员（列）可以随后按需、动态加入；
        -权限控制、存储以及调优都是在列族层面进行的；
        -HBase把同一列族里面的数据存储在同一目录下，由几个文件保存。

    Timestamp时间戳
        -在HBase每个cell存储单元对同一份数据有多个版本，根据唯一的时间戳来区分每个版本之间的差异，不同版本的数据按照时间倒序排序，最新的数据版本排在最前面。
        -时间戳的类型是 64位整型。
        -时间戳可以由HBase(在数据写入时自动)赋值，此时时间戳是精确到毫秒的当前系统时间。
        -时间戳也可以由客户显式赋值，如果应用程序要避免数据版本冲突，就必须自己生成具有唯一性的时间戳。

    Cell单元格
        -由行和列（列族+列名）的坐标交叉决定；
        -单元格是有版本的；
        -单元格的内容是未解析的字节数组；
            -由{row key， column( =<family> +<qualifier>)， version} 唯一确定的单元。
            -cell中的数据是没有类型的，全部是字节码形式存贮。---》全部为字节码存储（byte[]）

    HLog(WAL log)  --》记录操作以及相关数据
        -HLog文件就是一个普通的Hadoop Sequence File，Sequence File 的Key是HLogKey对象，HLogKey中记录了写入数据的归属信息，除了table和region名字外，同时还包括 sequence number和timestamp，timestamp是” 写入时间”，sequence number的起始值为0，或者是最近一次存入文件系统中sequence number。
        -HLog SequeceFile的Value（---》数据）是HBase的KeyValue对象，即对应HFile中的KeyValue。


Hbase架构
******************************************************************************************************************************************************************
    client --》  zk       ---》Hmaster
                                    --》HRegionServers
        |       /-》健康检查
            v
   HRegionServers
        |
        v
     HRegions   -》表
              -》Hlog   WAL log  一对一
              -》Store  --》列族    一对多
                    -》》storeFilles
                    -》》MemStore
                           -》承担一部分读缓存的压力、检索数据首先查询MemStore，然后再去查BlockCache，最后读取StoreFile
   -----------------------------------------------------------------------------------------------------------------------------------------------
                                                                    HDFS
******************************************************************************************************************************************************************
    Client
        -包含访问HBase的接口并维护cache（MemStore、blockCache）来加快对HBase的访问
    Zookeeper
        -保证任何时候，集群中只有一个master
                                -》分布式协同服务、健康检查
        -存贮所有Region的寻址入口。
        -实时监控Region server的上线和下线信息。并实时通知Master
        -存储HBase的schema和table元数据
    Master
        -为Region server分配region
        -负责Region server的负载均衡
        -发现失效的Region server并重新分配其上的region
        -管理用户对table的增删改操作
    RegionServer
        -Region server维护region，处理对这些region的IO请求
                                                -》(读写操作--》大批量的读写操作)
        -Region server负责切分在运行过程中变得过大的region
                                                -》裂变，将region切分到另一个regionServer中
    Region
        -HBase自动把表水平划分成多个区域(region)，每个region会保存一个表里面某段连续的数据
                                                                            -》字典排序-》数据连续
        -每个表一开始只有一个region，随着数据不断插入表，region不断增大，当增大到一个阀值的时候，region就会等分会两个新的region（裂变）
        -当table中的行不断增多，就会有越来越多的region。这样一张完整的表被保存在多个Regionserver 上。
                                                                            -》裂变-》将一个region分到另一个regionServer中去
    Memstore 与 storefile
        -一个region由多个store组成，一个store对应一个CF（列族）
        -store包括位于内存中的memstore和位于磁盘的storefile写操作先写入memstore，当memstore中的数据达到某个阈值，hregionserver会启动
                                                                                                                    -》flashcache进程写入storefile，
                                                                                                                                -》每次写入形成单独的一个storefile

        -当storefile文件的数量增长到一定阈值后，系统会进行合并（minor--》小范围）、major compaction-》必须手动控制），在合并过程中会进行版本合并和删除工作（majar），形成更大的storefile
        -当一个region所有storefile的大小和数量超过一定阈值后，会把当前的region分割为两个，并由hmaster分配到相应的regionserver服务器，实现负载均衡
        -客户端检索数据，先在memstore找，---》blockCache  --》找不到再找storefile

